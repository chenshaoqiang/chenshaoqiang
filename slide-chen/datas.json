{
  "flag": "000000",
  "desc": "success",
  "data": {
    "list": [
      {
        "id": "mod0",
        "title": "框架和类库",
        "content": [
          {"data":"类库--类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。类库有：jQuery等。"},
          {"data":"框架--框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。框架有:Bootstrap、Angular、React等。"}]
      },
      {
        "id": "mod1",
        "title": "CRUD应用",
        "content": [
          {"data":"增加Create、查询Retrieve、更新Update、删除Delete"}
        ]
      },
      {
        "id": "mod2",
        "title": "为什么要放在底部？",
        "content": [
          {"data":"将script标签放在底部缩短应用加载的时间，因为这样HTML的加载不会被angular.js脚本的加载阻塞。"}
        ]
      },
      {
        "id": "mod3",
        "title": "引用版本差异?",
        "content": [
          {"data":"angular.js是具有可读性的版本,适合开发和调试。angular.min.js是压缩和混淆后的版本,适合部署到成型产品中。"}
        ]
      },
      {
        "id": "mod4",
        "title": "DOMContentLoaded事件",
        "content": [
          {"data":"过去,当一个页面完成加载时,初始化脚本的方法是使用load事件,但这个类函数的缺点是仅在所有资源都完全加载后才被触发,这有时会导致比较严重的延迟,开发人员随后创建了一种自定义事件,domready,它在DOM加载之后及资源加载之前被触发。"},
          {"data":"domready事件迅速被众多JavaScript库所采用,它开始在本地浏览器中以DOMContentLoaded的形式被使用;此外,它目前已在HTML5中被标准化,下面的代码显示了DOMContentLoaded是如何在document对象中被触发的:"},
          {"data":"document.addeventListener('DOMContentLoaded',function(){...},false);"},
          {"data":"值得注意的是,这个网站的行为层可以被更快速地启动,这意味着用户可以更快开始浏览网站,这对于连接速度慢的网络或者包含大量图片并需要一些时间加载图片的网页来说特别重要,如果只想在所有资源都完成加载之后运行脚本, 那么仍然可以使用load。"}
        ]
      },
      {
        "id": "mod5",
        "title": "$digest和$watch",
        "content": [
          {"data":"1.$watch 队列（$watch充当观察者/监视者）"},
          {"data":"每次你绑定一些东西到你的UI上时你就会往$watch队列里插入一条$watch。想象一下$watch就是那个可以检测它监视的model里有变化的东西。"},
          {"data":"$scope.$watch('aModel', function(newValue, oldValue) {//update the DOM with newValue})"},
          {"data":"传入到 $watch() 中的第二个参数是一个回调函数，该函数在 aModel 的值发生变化的时候会被调用。AngularJS 是如何知晓 aModel 发生了变化，才调用了对应的回调函数呢？它会周期性的运行一个函数来检查 scope 模型中的数据是否发生了变化吗？这就是 $digest 循环的用武之地了。"},
          {"data":"2.$digest循环（这个digest是消化的意思）"},
          {"data":"当浏览器接收到可以被angular上下文处理的事件时，$digest循环就会触发。$digest将会遍历我们的$watch，然后询问："},
          {"data":"：嘿，$watch，A的值是什么？"},
          {"data":"：是9。"},
          {"data":"：好的，它改变过吗？"},
          {"data":"：没有，先生。"},
          {"data":"（这个变量没变过，那下一个）"},
          {"data":"：B呢，B的值是多少？"},
          {"data":"：报告，是123。"},
          {"data":"：刚才改变过没？"},
          {"data":"：改变过，刚才是321。"},
          {"data":"（很好，我们有DOM需要更新了）"},
          {"data":"如此继续询问直到$watch队列都检查过。"}
        ]
      },
      {
        "id": "mod6",
        "title": "数据绑定",
        "content": [
          {"data":"在AngularJS中显示模型中的数据有两种方式："},
          {"data":"一种是使用花括号插值的方式："},
          {"data":"<p>{{cotent}}</p>"},
          {"data":"当然，其中的表达式还可以是表达式和过滤器({{ expression | filter }})的组合。AngularJS提供了过滤器来对输入输出数据格式化。"},
          {"data":"另一种是使用基于属性的指令，叫做ng-bind"},
          {"data":"<p ng-bind='cotent'></p>"},
          {"data":"这两种方式的效果都是一样的，其主要区别在于，使用花括号语法时，在AngularJS使用数据替换模板中的花括号时，第一个加载的页面，通常是应用中的index.html，其未被渲染的模板可能会被用户看到。而使用第二种方法的视图不会遇到这种问题。"},
          {"data":"原因是，浏览器需要首先加载index.html页面，渲染它，然后AngularJS才能把它解析成你期望看到的内容。"},
          {"data":"所以，对于index.html页面中的数据绑定操作，建议采用ng-bind。那么在数据加载完成之前用户就不会看到任何内容。"}
        ]
      },
      {
        "id": "mod7",
        "title": "依赖注入",
        "content": [
          {"data":"依赖注入是一种软件设计模式，用来处理代码的依赖关系。一般来说有三种方法让函数获得它的需要的依赖："},
          {"data":"1.它的依赖是能被创建的，一般用new操作符就行。"},
          {"data":"2.能够通过全局变量查找依赖。"},
          {"data":"3.依赖能在需要时被导入。"},
          {"data":"前两种方式都不是很好，因为它们需要对依赖硬编码，使得修改依赖的时候变得困难。第三种方式是最好的，因为它不必在组件中去主动需找和获取依赖，而是由外界将依赖传入。"},
          {"data":"每一个AngularJS应用都有一个注入器(injector)用来处理依赖的创建。注入器是一个负责查找和创建依赖的服务定位器。"},
          {"data":"注入器需要应用提供一些标记来表示自己需要的依赖。下面有三个等效的表示的自己需要的依赖的方法。"},
          {"data":"1.推断依赖:"},
          {"data":"最简单的处理依赖的方法，就是假设函数的参数名就是依赖的名字:"},
          {"data":"function MyController($scope) {...}"},
          {"data":"在上面的例子中，$scope是需要注入到函数中的依赖。用了这种方法就不能使用JavaScript minifiers/obfuscators（一些用来缩短JS的类库）了，因为它们会改变变量名。"},
          {"data":"2.$inject 标记:"},
          {"data":"要允许压缩类库重命名函数参数，同时注入器又能正确处理依赖的话，函数需要使用$inject属性。这个属性是一个包含依赖的名称的数组。"},
          {"data":"var MyController = function(renamed$scope, renamed$http) {...}"},
          {"data":"MyController.$inject = ['$scope', '$http'];"},
          {"data":"注意!!!  $inject标记里的值和函数声明的参数是一一对应的。"},
          {"data":"3.行内标记(使用Javascript数组方式,数组最后一个元素是方法函数)"},
          {"data":"有时候用$inject标记不是很方便，比如用来声明指令的时候,会导致代码膨胀。这种情况我们就推荐使用行内标记:"},
          {"data":"app.controller('appCtrl',['$scope','$rootScope',function($scope,$rootScope){...}])"},
          {"data":"依赖注入在AngularJS中很普遍。一般用在控制器和工场方法中。"}
        ]
      },
      {
        "id": "mod8",
        "title": "priority(优先级)-->[number]",
        "content": [
          {"data":"当一个DOM上有多个指令时，有时会需要指定指令执行的顺序。这个优先级就是用来在执行指令的compile函数前先排序的。高优先级的先执行。相同优先级的指令顺序没有被指定谁先执行。"}
        ]
      },
      {
        "id": "mod9",
        "title": "template(模板)[string or function]",
        "content": [
          {"data":"这个属性，规定了指令被Angular编译和链接（link）后生成的HTML标记，这个属性可以简单到只有一个HTML文本在里面，也可以特别复杂，当该属性的值为function的时候，那么该方法返回的就是代表模板的字符串，同时也可以在里面使用{{}}这个表达式。"},
          {"data":"template: '<div>hello</div>'"},
          {"data":"template: function () {return '<button>click me</button>';}"}
        ]
      },
      {
        "id": "mod10",
        "title": "templateUrl(外部模版)[string]",
        "content": [
          {"data":"和template属性一样，只不过这里指示的是一个模板的URL。因为模板加载是异步的，所有编译和链接都会等到加载完成后再执行。"},
          {"data":"一般情况下，template这个属性都会被templateUrl取代掉，用它来指向一个外部的文件地址，所以我们通常把模板放在外部的一个HTML文件中，然后使用templateUrl来指向它。"}
        ]
      },
      {
        "id": "mod11",
        "title": "replace(替换)[boolean]",
        "content": [
          {"data":"这个属性用来规定生成的HTML内容是否会替换掉定义此指令的HTML元素。如果被设置成true那么现在的元素会被模板替换。当然false的时候不会替换，会把模版置于指令标签之内。"}
        ]
      },
      {
        "id": "mod12",
        "title": "transclude(编译模板)[boolean]",
        "content": [
          {"data":"这个属性用来让我们规定指令是否可以包含任意内容"},
          {"data":"如果tranclude为true的话，则保留原来指令内嵌的元素,这些内嵌的元素将会被插入到替换后的模板中具有ng-transclude指令的内部"},
          {"data":"比如template上这么写template:'<div class='panel-body' ng-transclude></div>'则指令内嵌元素保留且被插入到此模版内。"},
          {"data":"比如指令是hello,则内部的span标签将会移入div.panel-body中。<hello><span>{{color}}</span></hello>"}
        ]
      },
      {
        "id": "mod13",
        "title": "restrict(限制)[EACM字母组合]",
        "content": [
          {"data":"用来规定指令在HTML代码中可以使用什么表现形式。A代表属性、E代表元素、C代表类、M代表注释。"},
          {"data":"如果没有这一项。那就只允许使用属性形式的指令。"}
        ]
      },
      {
        "id": "mod14",
        "title": "terminal[boolean]",
        "content": [
          {"data":"该参数用来定义是否停止当前元素上比本指令优先级低的指令。"},
          {"data":"如果值为true，就是正常情况，按照优先级高低的顺序来执行，如果设置为false，就不会执行当前元素上比本指令优先级低的指令。"}
        ]
      },
      {
        "id": "mod15",
        "title": "scope(作用域)-->[boolean or object]",
        "content": [
          {"data":"该属性是用来定义指令的scope的范围。"},
          {"data":"默认情况下是false，也就是说该指令继承了父controller的scope，可以随意的使用父controller的scope里的属性，但是这样的话就会污染到父scope里的属性，这样是不可取的。"},
          {"data":"当为true的时候，表示让Angular给指令创建一个继承于父scope的scope。"},
          {"data":"当为{}的时候，表示创建一个隔离的scope，不会继承父scope的属性。但是在有的时候我们也要需要访问父scope里的属性或者方法，那么我们应该怎么办呢。angular早就为我们想到了这一点，有以下的三个办法:"},
          {"data":"(1)使用@实现单向绑定。"},
          {"data":"@ 或 @attr - 将本地作用域成员成员和DOM属性绑定。绑定结果总是一个字符串，因为DOM的属性就是字符串。如果DOM属性的名字没有被指定，那么就和本地属性名一样。"},
          {"data":"比如说<widget my-attr='{{name}}'> 和 scope:  { localName:'@myAttr' }。"},
          {"data":"当name值改变的时候，LocalName也会改变。这个name是从父作用域中读来的。"},
          {"data":"(2)使用=实现双向绑定"},
          {"data":" 在本地作用域属性和父作用域属性间建立一个双向的绑定。如果没有指定父作用域属性名称，那就和本地名称一样。 比如 <widget my-attr='parentModel'> 和scope: { localModel:'=myAttr' }, 本地属性localModel会反映父作用域中parentModel的值。localModel和parentModel的任一方改变都会影响对方。"},
          {"data":"(3)使用&调用父scope里的方法"},
          {"data":" 提供了一种能在父作用域下执行表达式的方法。如果没有指定父作用域属性名称，那就和本地名称一样。"},
          {"data":"比如html是这样的<hello say-sth='saySth(sth)'></hello>"},
          {"data":"而且父作用域里有个$scope.saySth= function (sth) {console.log(sth)}的方法，本地作用域成员scope: {saySth:'&'}"},
          {"data":"通常你可以通过这个表达式从本地作用域给父作用域传值， 操作方法是将本地变量名和值的对应关系传给这个表达式的包装函数。比如说这样:"},
          {"data":"scope.saySth({sth:'hello!'})"}
        ]
      },
      {
        "id": "mod16",
        "title": "require[string or string[]]",
        "content": [
          {"data":" 请求将另一个控制器作为参数传入到当前链接函数。 这个请求需要传递被请求指令的控制器的名字。如果没有找到，就会触发一个错误。请求的名字可以加上下面两个前缀："},
          {"data":"?--不要触发错误，这只是一个可选的请求。"},
          {"data":"^--没找到的话，在父元素的controller里面再查找有没有。"}
        ]
      },
      {
        "id": "mod17",
        "title": "controller[string or function]",
        "content": [
          {"data":"当我们想要允许其他的指令和你的指令发生交互时，我们就需要使用controller函数。"},
          {"data":"这个控制器函数是在预编译阶段被执行的，并且它是共享的，其他指令可以通过它的名字得到。"},
          {"data":"这就使得指令间可以互相交流来扩大自己的能力。"},
          {"data":"会传递给这个函数的参数有："},
          {"data":"$scope -- 当前元素关联的作用域。"},
          {"data":"$element -- 当前元素"},
          {"data":"$attrs -- 当前元素的属性对象。"},
          {"data":"$transclude -- 模板链接功能前绑定到正确的模板作用域。"}
        ]
      },
      {
        "id": "mod18",
        "title": "compile(编译函数)",
        "content": [
          {"data":"编译函数是用来处理需要修改模板DOM的情况的。因为大部分指令都不需要修改模板，所以这个函数也不常用。需要用到的例子有ngRepeat，这个是需要修改模板的，还有ngView这个是需要异步载入内容的。（有了compile，就不能用link，link函数由compile返回）"},
          {"data":"编译函数接受以下参数"},
          {"data":"tElement(template element) - 指令所在的元素。对这个元素及其子元素进行变形之类的操作是安全的。"},
          {"data":"tAttrs(template attributes)- 这个元素上所有指令声明的属性，这些属性都是在编译函数里共享的。"},
          {"data":"transclude - 一个嵌入的链接函数function(scope, cloneLinkingFn)。"},
          {"data":"注意：如果模板被克隆了，那么模版实例和链接实例可能不是同一个对象。 所以在编译函数不要进行任何DOM变形之外的操作。 更重要的，DOM监听事件的注册应该在链接函数中做，而不是编译函数中。"},
          {"data":"compile 函数不能访问 scope，并且必须返回一个 link 函数。"}
        ]
      },
      {
        "id": "mod19",
        "title": "link(链接函数)",
        "content": [
          {"data":"链接函数负责注册DOM事件和更新DOM。它是在模板被克隆之后执行的。 它也是大部分指令逻辑代码编写的地方。"},
          {"data":"scope- 指令需要监听的作用域。"},
          {"data":"iElement(instance element)-指令所在的元素。只有在postLink函数中对元素的子元素进行操作才是安全的，因为那时它们已经全部链接好。"},
          {"data":"iAttrs(instance attributes)- 实例属性，一个标准化的、所有声明在当前元素上的属性列表，这些属性在所有链接函数间是共享的。"}
        ]
      },
      {
        "id": "mod20",
        "title": "Pre-linking",
        "content": [
          {"data":"在子元素被链接前执行。不能用来进行DOM的变形，以为可能导致链接函数找不到正确的元素来链接。"}
        ]
      },
      {
        "id": "mod21",
        "title": "",
        "content": [
          {"data":"Post-linking"},
          {"data":"所有元素都被链接后执行。可以操作DOM的变形。"}
        ]
      },
      {
        "id": "mod100",
        "title": "",
        "content": [
          {"data":""},
          {"data":""}
        ]
      }
    ]
  }
}